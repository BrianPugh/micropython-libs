[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poetry]
name = "lib"
version = "0.0.0"  # Do not change, let poetry-dynamic-versioning handle it.
homepage = "https://github.com/BrianPugh/micropython-libs"
repository = "https://github.com/BrianPugh/micropython-libs"
license = "Apache-2.0"
description = ""
authors = ["Brian Pugh"]
readme = "README.rst"
packages = [{include = "lib"}]

[tool.poetry.dependencies]
python = "^3.10"
belay = ">=0.18.0, <1.0.0"

[tool.poetry.group.docs.dependencies]
sphinx = "~4.5.0"
sphinx_rtd_theme = "~1.0.0"

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = "^5.1"}
flake8 = "^4.0.1"
ipdb = ">=0.13.9, <1.0.0"
poetry-dynamic-versioning = ">=0.16.0, <1.0.0"
pre_commit = "^2.16.0"
pytest = "^7.1.2"
pytest-cov = "^4.0.0"
pytest-mock = "^3.7.0"
matplotlib = "^3.6.1"
numpy = "^1.23.4"
pytest-skip-slow = ">=0.0.3, <1.0.0"
micropython-rp2-stubs = "^1.19.1.post11"

[tool.coverage.run]
branch = true
source = [
    "lib/*.py",
]
omit = [
    "lib/debouncedpin.py",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",

    # Don't complain about import workarounds
    "except ImportError:",
    "except ModuleNotFoundError:",
    "if micropython:",
]

[tool.pyright]
extraPaths = [
    "./lib/",
    ".belay/dependencies/main",
]
venvPath = "."
venv = ".venv"
ignore = [
    "**/*_pio.py",
]
reportMissingModuleSource = "none"  # for micropython stubs

[tool.pytest.ini_options]
pythonpath = "lib"
addopts = "--cov-report=term-missing --cov=lib"


[tool.belay.dependencies]
uprofiler = {uri="lib/uprofiler.py", develop=true}

[tool.ruff]
target-version = 'py38'

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "Q",  # flake8-quotes
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

ignore = [
    "B904",  # raise ... from ...
    "B905",  # zip strict=True; remove once python <3.10 support is dropped.
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "F821",  # Undefined name
    "N818",  # Exceptions should end in Error
    "SIM105",  # Use contextlib.suppress
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "PGH001",  # use of "eval"
]



[tool.ruff.lint.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.codespell]
skip = 'poetry.lock,'
